S1 = [
    [0xC, 0x4, 0x6, 0x2, 0xA, 0x5, 0xB, 0x9, 0xE, 0x8, 0xD, 0x7, 0x0, 0x3, 0xF, 0x1],
    [0x6, 0x8, 0x2, 0x3, 0x9, 0xA, 0x5, 0xC, 0x1, 0xE, 0x4, 0x7, 0xB, 0xD, 0x0, 0xF],
    [0xB, 0x3, 0x5, 0x8, 0x2, 0xF, 0xA, 0xD, 0xE, 0x1, 0x7, 0x4, 0xC, 0x9, 0x6, 0x0],
    [0xC, 0x8, 0x2, 0x1, 0xD, 0x4, 0xF, 0x6, 0x7, 0x0, 0xA, 0x5, 0x3, 0xE, 0x9, 0xB],
    [0x7, 0xF, 0x5, 0xA, 0x8, 0x1, 0x6, 0xD, 0x0, 0x9, 0x3, 0xE, 0xB, 0x4, 0x2, 0xC],
    [0x5, 0xD, 0xF, 0x6, 0x9, 0x2, 0xC, 0xA, 0xB, 0x7, 0x8, 0x1, 0x4, 0x3, 0xE, 0x0],
    [0x8, 0xE, 0x2, 0x5, 0x6, 0x9, 0x1, 0xC, 0xF, 0x4, 0xB, 0x0, 0xD, 0xA, 0x3, 0x7],
    [0x1, 0x7, 0xE, 0xD, 0x0, 0x5, 0x8, 0x3, 0x4, 0xF, 0xA, 0x6, 0x9, 0xC, 0xB, 0x2]]


def main():
    a = 0xfdb97531
    k = 0xffeeddccbbaa99887766554433221100f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff
    # print(fNonLiner(a))
    # print(hex(fRKey(k)))
    k = 0x87654321
    a = 0xfedcba98
    print(hex(fFuncg(k, a)))


def fNonLiner(a) -> int:  # done test
    """
    :param a: вектор V32
    :return:
    """
    return (S1[7][a >> 28] << 28) ^ (S1[6][(a >> 24) & 0xf] << 24) ^ \
           (S1[5][(a >> 20) & 0xf] << 20) ^ (S1[4][(a >> 16) & 0xf] << 16) ^ \
           (S1[3][(a >> 12) & 0xf] << 12) ^ (S1[2][(a >> 8) & 0xf] << 8) ^ \
           (S1[1][(a >> 4) & 0xf] << 4) ^ (S1[0][(a >> 0) & 0xf])


def fRKey(iHkey) -> int:  # done test
    return (iHkey << 768) ^ \
           ((iHkey & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) << 512) ^ \
           ((iHkey & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) << 256) ^ \
           ((iHkey & 0xffffffff) << 224) ^ ((iHkey >> 32 & 0xffffffff) << 192) ^ \
           ((iHkey >> 64 & 0xffffffff) << 160) ^ ((iHkey >> 96 & 0xffffffff) << 128) ^ \
           ((iHkey >> 128 & 0xffffffff) << 96) ^ ((iHkey >> 160 & 0xffffffff) << 64) ^ \
           ((iHkey >> 192 & 0xffffffff) << 32) ^ (iHkey >> 224 & 0xffffffff)


def fshift(ixData, iNum=11):
    return ((ixData << iNum) ^ (ixData >> (ixData.bit_length() - iNum))) & 0x000ffffffff


def fFuncg(k, a) -> int:  # 32 -> 32
    """
    :param a: V32
    :param k: V32
    :return:
    """
    return fshift(fNonLiner(((((a >> 28 + k >> 28) % pow(2, 32)) << 28) ^
                             (((((a >> 24) & 0xf) + ((k >> 24) & 0xf)) % pow(2, 32)) << 24) ^
                             (((((a >> 20) & 0xf) + ((k >> 20) & 0xf)) % pow(2, 32)) << 20) ^
                             (((((a >> 16) & 0xf) + ((k >> 16) & 0xf)) % pow(2, 32)) << 16) ^
                             (((((a >> 12) & 0xf) + ((k >> 12) & 0xf)) % pow(2, 32)) << 12) ^
                             (((((a >> 8) & 0xf) + ((k >> 8) & 0xf)) % pow(2, 32)) << 8) ^
                             (((((a >> 4) & 0xf) + ((k >> 4) & 0xf)) % pow(2, 32)) << 4) ^
                             (((a & 0xf) + (k & 0xf)) % pow(2, 32)))))


if __name__ == '__main__':
    main()
